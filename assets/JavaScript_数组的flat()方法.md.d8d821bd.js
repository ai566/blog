import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.9bc09dc8.js";const F=JSON.parse('{"title":"数组的flat()方法","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/数组的flat()方法.md","filePath":"JavaScript/数组的flat()方法.md"}'),p={name:"JavaScript/数组的flat()方法.md"},o=l(`<h1 id="数组的flat-方法" tabindex="-1">数组的flat()方法 <a class="header-anchor" href="#数组的flat-方法" aria-label="Permalink to &quot;数组的flat()方法&quot;">​</a></h1><p>有些场景下，我们需要将具有嵌套结构的数组打平，ES2019新增了flat()方法用于数组的打平操作，例如：</p><div class="language-j vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">j</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const arr1= [ 1, [2,3],4 ]</span></span>
<span class="line"><span style="color:#e1e4e8;">const arr2=arr.flat()</span></span>
<span class="line"><span style="color:#e1e4e8;">console.log(arr2)   //=&gt;[1,2,3,4]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const arr1= [ 1, [2,3],4 ]</span></span>
<span class="line"><span style="color:#24292e;">const arr2=arr.flat()</span></span>
<span class="line"><span style="color:#24292e;">console.log(arr2)   //=&gt;[1,2,3,4]</span></span></code></pre></div><p>该方法还可以接收一个整数，表示打平的深度，默认情况下，打平一级嵌套，例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[[[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]]]   </span><span style="color:#6A737D;">// 三级嵌套</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr1</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">flat</span><span style="color:#E1E4E8;">()  </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arr1)    </span><span style="color:#6A737D;">//=&gt; [[1]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr2</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">flat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arr2)  </span><span style="color:#6A737D;">//=&gt;[1]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[[[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]]]   </span><span style="color:#6A737D;">// 三级嵌套</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr1</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">flat</span><span style="color:#24292E;">()  </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr1)    </span><span style="color:#6A737D;">//=&gt; [[1]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr2</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">flat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr2)  </span><span style="color:#6A737D;">//=&gt;[1]</span></span></code></pre></div><p>注意，当打平深度高于嵌套层级时，永远只会返回一维数组：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// const arr=[[[1]]]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr3</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">flat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arr)   </span><span style="color:#6A737D;">//=&gt;[1]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// const arr=[[[1]]]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr3</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">flat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr)   </span><span style="color:#6A737D;">//=&gt;[1]</span></span></code></pre></div><p>也就是说，打平的结果永远还是数组。</p>`,8),e=[o];function t(c,r,y,E,i,d){return a(),n("div",null,e)}const _=s(p,[["render",t]]);export{F as __pageData,_ as default};
