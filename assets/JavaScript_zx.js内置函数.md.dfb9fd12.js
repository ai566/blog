import{_ as a,o as e,c as s,Q as t}from"./chunks/framework.3afb20c3.js";const b=JSON.parse('{"title":"zx.js内置函数","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/zx.js内置函数.md","filePath":"JavaScript/zx.js内置函数.md"}'),o={name:"JavaScript/zx.js内置函数.md"},n=t('<h1 id="zx-js内置函数" tabindex="-1">zx.js内置函数 <a class="header-anchor" href="#zx-js内置函数" aria-label="Permalink to &quot;zx.js内置函数&quot;">​</a></h1><p>zx.js有一些内置函数，名称和作用基本和Linux的Shell命令类似。内置函数不需要使用import关键字导入，可以直接使用。</p><h2 id="cd" tabindex="-1">cd（） <a class="header-anchor" href="#cd" aria-label="Permalink to &quot;cd（）&quot;">​</a></h2><p>该函数允许更改当前的工作目录，类似于Linux的cd命令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">cd(&#39;/tmp&#39;)</span></span>\n<span class="line"><span style="color:#e1e4e8;">await $`pwd` // outputs /tmp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cd(&#39;/tmp&#39;)</span></span>\n<span class="line"><span style="color:#24292e;">await $`pwd` // outputs /tmp</span></span></code></pre></div><h2 id="fetch" tabindex="-1">fetch（） <a class="header-anchor" href="#fetch" aria-label="Permalink to &quot;fetch（）&quot;">​</a></h2><p>该函数用于执行http网络请求，具体用法可参考JavaScript内置的fetch API用法。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">let response = await fetch(&#39;https://wttr.in&#39;){  console.log(await response.text())}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">let response = await fetch(&#39;https://wttr.in&#39;){  console.log(await response.text())}</span></span></code></pre></div><h2 id="question" tabindex="-1">question（） <a class="header-anchor" href="#question" aria-label="Permalink to &quot;question（）&quot;">​</a></h2><p>该函数用于提示用户输入，以便为变量取得用户设定的值，类似于Linux的read命令。</p><pre><code>const name = question(&#39;请输入你的名字：&#39;)\n</code></pre><h2 id="chalk" tabindex="-1">chalk() <a class="header-anchor" href="#chalk" aria-label="Permalink to &quot;chalk()&quot;">​</a></h2><p>该函数用于修改终端输出的文字颜色。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">console.log(chalk.blue(&#39;This is blue&#39;));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">console.log(chalk.blue(&#39;This is blue&#39;));</span></span></code></pre></div>',14),l=[n];function c(p,i,r,d,h,u){return e(),s("div",null,l)}const g=a(o,[["render",c]]);export{b as __pageData,g as default};
