import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.9bc09dc8.js";const u=JSON.parse('{"title":"迭代器和生成器","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/迭代器和生成器.md","filePath":"JavaScript/迭代器和生成器.md"}'),p={name:"JavaScript/迭代器和生成器.md"},o=l(`<h1 id="迭代器和生成器" tabindex="-1">迭代器和生成器 <a class="header-anchor" href="#迭代器和生成器" aria-label="Permalink to &quot;迭代器和生成器&quot;">​</a></h1><h2 id="可迭代对象" tabindex="-1">可迭代对象 <a class="header-anchor" href="#可迭代对象" aria-label="Permalink to &quot;可迭代对象&quot;">​</a></h2><p>对于某种数据类型，如果它的元素可以按照确定的顺序进行有限的读取，那么我们认为这个数据类型是可迭代对象。所以，可迭代对象有两大关键特征：元素的数量是有限的；元素的顺序是确定的。</p><p>因此，数组、Map、Set都是可迭代类型。要特别注意两种类型：string是可迭代对象，里面的字符是它的元素；而Object类型不是可迭代对象，因为Object的元素的顺序是不确定的。</p><h2 id="从可迭代对象创建迭代器" tabindex="-1">从可迭代对象创建迭代器 <a class="header-anchor" href="#从可迭代对象创建迭代器" aria-label="Permalink to &quot;从可迭代对象创建迭代器&quot;">​</a></h2><p>所有的可迭代对象都有一个<code>[Symbol.iterator]()</code>方法，使用该方法可以返回一个迭代器</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]  </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr[Symbol.iterator]()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]  </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[Symbol.iterator]()</span></span></code></pre></div><p>返回的迭代器有一个next()方法，不断得弹出元素值，done属性为false表示还有值可以被弹出，直到done属性变为true表示至此所有元素已经“耗尽”：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()   </span><span style="color:#6A737D;">//=&gt; {value:1, done:false}</span></span>
<span class="line"><span style="color:#E1E4E8;">iter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">// =&gt; {value:2, done:false}</span></span>
<span class="line"><span style="color:#E1E4E8;">iter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">// =&gt; {value:3, done:true}，元素耗尽</span></span>
<span class="line"><span style="color:#E1E4E8;">iter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">//=&gt; {value:undefined ,done:true}，后面的值都将是undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()   </span><span style="color:#6A737D;">//=&gt; {value:1, done:false}</span></span>
<span class="line"><span style="color:#24292E;">iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">// =&gt; {value:2, done:false}</span></span>
<span class="line"><span style="color:#24292E;">iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">// =&gt; {value:3, done:true}，元素耗尽</span></span>
<span class="line"><span style="color:#24292E;">iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">//=&gt; {value:undefined ,done:true}，后面的值都将是undefined</span></span></code></pre></div><h2 id="生成器" tabindex="-1">生成器 <a class="header-anchor" href="#生成器" aria-label="Permalink to &quot;生成器&quot;">​</a></h2><p>生成器的作用是生成一个自定义的可迭代对象，通过yield不断生成元素，通过return生成终止。生成器是一个函数，与普通函数的区别是在函数名称前面加上了一个星号。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generator</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generator</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">iter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()   </span><span style="color:#6A737D;">//=&gt; {value:1, done:false}</span></span>
<span class="line"><span style="color:#E1E4E8;">iter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">// =&gt; {value:2, done:false}</span></span>
<span class="line"><span style="color:#E1E4E8;">iter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">// =&gt; {value:3, done:true}，元素耗尽</span></span>
<span class="line"><span style="color:#E1E4E8;">iter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">//=&gt; {value:undefined ,done:true}，后面的值都将是undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generator</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()   </span><span style="color:#6A737D;">//=&gt; {value:1, done:false}</span></span>
<span class="line"><span style="color:#24292E;">iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">// =&gt; {value:2, done:false}</span></span>
<span class="line"><span style="color:#24292E;">iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">// =&gt; {value:3, done:true}，元素耗尽</span></span>
<span class="line"><span style="color:#24292E;">iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">//=&gt; {value:undefined ,done:true}，后面的值都将是undefined</span></span></code></pre></div><h2 id="可迭代对象的foreach-方法" tabindex="-1">可迭代对象的forEach()方法 <a class="header-anchor" href="#可迭代对象的foreach-方法" aria-label="Permalink to &quot;可迭代对象的forEach()方法&quot;">​</a></h2><p>forEach()是大多数可迭代对象都具有的方法，forEach()方法接收一个回调函数作为参数，该函数接收三个参数：</p><p>element：可迭代对象的元素</p><p>index：该元素的索引位置</p><p>array/map/set：可迭代对象本身，可以根据当前可迭代对象的类型定义一个意义明显的参数名称。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">map.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">map</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`键\${</span><span style="color:#E1E4E8;">index</span><span style="color:#9ECBFF;">}的值是\${</span><span style="color:#E1E4E8;">element</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：</span></span>
<span class="line"><span style="color:#6A737D;">// 键a的值是1</span></span>
<span class="line"><span style="color:#6A737D;">// 键b的值是2</span></span>
<span class="line"><span style="color:#6A737D;">// 键c的值是3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">element</span><span style="color:#24292E;">,</span><span style="color:#E36209;">index</span><span style="color:#24292E;">,</span><span style="color:#E36209;">map</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`键\${</span><span style="color:#24292E;">index</span><span style="color:#032F62;">}的值是\${</span><span style="color:#24292E;">element</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">// 输出：</span></span>
<span class="line"><span style="color:#6A737D;">// 键a的值是1</span></span>
<span class="line"><span style="color:#6A737D;">// 键b的值是2</span></span>
<span class="line"><span style="color:#6A737D;">// 键c的值是3</span></span></code></pre></div>`,18),e=[o];function t(c,r,y,E,i,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
