import{_ as s,o as a,c as p,Q as l}from"./chunks/framework.3afb20c3.js";const F=JSON.parse('{"title":"sed命令","description":"","frontmatter":{},"headers":[],"relativePath":"Linux/sed命令.md","filePath":"Linux/sed命令.md"}'),n={name:"Linux/sed命令.md"},o=l('<h1 id="sed命令" tabindex="-1">sed命令 <a class="header-anchor" href="#sed命令" aria-label="Permalink to &quot;sed命令&quot;">​</a></h1><h2 id="sed命令语法" tabindex="-1">sed命令语法 <a class="header-anchor" href="#sed命令语法" aria-label="Permalink to &quot;sed命令语法&quot;">​</a></h2><p>sed命令语法如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">选项</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&#39;命令部分&#39;</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;">   </span><span style="color:#032F62;">选项</span><span style="color:#24292E;">   </span><span style="color:#032F62;">&#39;命令部分&#39;</span><span style="color:#24292E;">  </span><span style="color:#032F62;">文件</span></span></code></pre></div><p>常见的选项如下：</p><ul><li><p>-n : 只打印被sed处理的行，默认是处理后的结果，经常与p搭配。</p></li><li><p>-i : 默认情况下，会将待处理的文件内容拷贝到缓存中，处理之后输出到屏幕上，此时无论是删除，还是查找替换，都对源文件的内容没有任何影响。-i 选项直接修改原文件，而不在屏幕上输出。这种无损操作可以提前测试查找替换的结果，避免产生不可逆的修改。 sed最重要的是命令部分，命令部分又分为三个小部分：找到匹配的行、具体操作、可选的新增内容</p></li></ul><h2 id="找到匹配的行" tabindex="-1">找到匹配的行 <a class="header-anchor" href="#找到匹配的行" aria-label="Permalink to &quot;找到匹配的行&quot;">​</a></h2><p>要确定哪些行被找到，有两种方式:</p><ul><li><p>直接指定行，使用n1,n2表示第n1行到第n2行，不指定就是所有行被找到。</p></li><li><p>基于内容的查找，使用 /text/ 去查找text文本，支持正则表达式。通过这两种方式找到的行，进入下一步等待操作。</p></li></ul><p>上一部通过直接指定或查找的方式找到了待操作的行，这一步就要指定基于行的具体的操作，具体操作分为两大类：基于整行的操作、基于字符的操作。</p><p>基于整行的操作又分为打印、删除、追加、替换、插入。</p><h2 id="基于整行的打印" tabindex="-1">基于整行的打印 <a class="header-anchor" href="#基于整行的打印" aria-label="Permalink to &quot;基于整行的打印&quot;">​</a></h2><p>打印操作符是p，为了只打印需要的行，需要加上-n选项，否则会重复输出需要的行。</p><p>例如，打印前5行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">,5p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">,5p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file.txt</span></span></code></pre></div><p>打印所有行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 打印所有行</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 打印所有行</span></span></code></pre></div><p>打印包含“word”文本的行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/word/p</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/word/p</span></span></code></pre></div><p>打印前5行中包含“word”文本的行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">,5/word/p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">,5/word/p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file.txt</span></span></code></pre></div><h2 id="基于整行的删除" tabindex="-1">基于整行的删除 <a class="header-anchor" href="#基于整行的删除" aria-label="Permalink to &quot;基于整行的删除&quot;">​</a></h2><p>删除的操作符是d，在匹配到行之后，使用如下操作删除：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">,3d</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">file.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">,3d</span><span style="color:#24292E;">  </span><span style="color:#032F62;">file.txt</span></span></code></pre></div><p>这行命令删除了前3行。</p><p>或者使用：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">/text/d</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">file.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;">  </span><span style="color:#032F62;">/text/d</span><span style="color:#24292E;">  </span><span style="color:#032F62;">file.txt</span></span></code></pre></div><p>这行命令将包含有“text”文本的行删除。</p><h2 id="基于整行的追加、插入和替换" tabindex="-1">基于整行的追加、插入和替换 <a class="header-anchor" href="#基于整行的追加、插入和替换" aria-label="Permalink to &quot;基于整行的追加、插入和替换&quot;">​</a></h2><p>基于整行的追加、插入、替换的指令分别是a、i、c。例如：</p><p>要在第一行前面加入新文本内容，运行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;1i new text&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;1i new text&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file.txt</span></span></code></pre></div><p>要在最后一行后面追加新内容，运行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">$a</span><span style="color:#9ECBFF;">  new text&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$a</span><span style="color:#032F62;">  new text&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file.txt</span></span></code></pre></div><p>这里$表示最后一行。</p><p>而要将第3行整行换成新内容，运行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;3c   new text &quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">file.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;3c   new text &quot;</span><span style="color:#24292E;">  </span><span style="color:#032F62;">file.txt</span></span></code></pre></div><p>注意，由于后面的文本中出现了空格，故而上面这三个操作都是需要添加引号的，否则会被识别为命令行参数。</p><p>前面提到的替换操作是整行替换，sed还可以基于字符替换。</p><h2 id="基于字符的查找替换" tabindex="-1">基于字符的查找替换 <a class="header-anchor" href="#基于字符的查找替换" aria-label="Permalink to &quot;基于字符的查找替换&quot;">​</a></h2><p>基于字符的查找替换是sed最常见的操作。在找到行之后，使用<code>s/旧文本/新文本/g</code> 以执行基于字符的替换操作。这里的<code>g</code>表示行内全局替换，否则只替换找到的每行的第一个。例如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">s/old/new/g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">s/old/new/g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file.txt</span></span></code></pre></div><p>上面这行命令将所有old文本替换成new文本。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">,5s/old/new/gi</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">,5s/old/new/gi</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file.txt</span></span></code></pre></div><p>上面这行命令将前5行的old文本替换成new文本，且忽略大小写。</p><p>值得提醒的的是，一般情况下使用 <code>s/旧文本/新文本/g</code> 进行替换，但这里的<code>/</code>可以换成其它字符，如果遇到文本中本来就包含<code>/</code>的情况，可以使用转义符号<code>\\</code>转义，不过更加建议更换成其它字符，比如<code>*</code>。</p><p>例如，更换apt包管理器的软件仓库地址，以提升下载速度，而仓库地址包含<code>/</code>字符，此时，就可以使用：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">-i</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">s</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">http://archive.ubuntu.com/ubuntu/</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">https://mirrors.aliyun.com/ubuntu/</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">g</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">/etc/apt/sources.list</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">-i</span><span style="color:#24292E;">  </span><span style="color:#032F62;">s</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">http://archive.ubuntu.com/ubuntu/</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">https://mirrors.aliyun.com/ubuntu/</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">g</span><span style="color:#24292E;">   </span><span style="color:#032F62;">/etc/apt/sources.list</span></span></code></pre></div><p>这里我们使用了<code>*</code>进行分隔。注意加<code>-i</code> 将修改应用到源文件。</p><h2 id="sed配合管道、重定向" tabindex="-1">sed配合管道、重定向 <a class="header-anchor" href="#sed配合管道、重定向" aria-label="Permalink to &quot;sed配合管道、重定向&quot;">​</a></h2><p>sed可以配合管道使用：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">nl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file.txt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">,5p</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">nl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file.txt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">,5p</span></span></code></pre></div><p>上面这行命令先显示文件的行号，然后打印前5行。</p><p>重定向的意思是把本来要输出到屏幕上的内容复制到新文件中，例如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">,5p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file.txt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">,5p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file.txt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new.txt</span></span></code></pre></div><p>上面这行命令将文件的前5行复制到new.txt中。</p><p>再比如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/文本/p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">文件</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/文本/p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">文件</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new.txt</span></span></code></pre></div><p>这行命令将文件中包含word文本的那些行复制到new.txt中。</p>',59),e=[o];function t(c,r,d,i,y,E){return a(),p("div",null,e)}const u=s(n,[["render",t]]);export{F as __pageData,u as default};
